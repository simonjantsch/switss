#!/usr/bin/env python3

import argparse
import json
import copy
import numpy as np

from switss.utils import color_from_hash 
from switss.model import MDP, DTMC, ReachabilityForm
from switss.problem import *
from switss.certification import check_farkas_certificate, generate_farkas_certificate

def vprint(*els, **kwargs):
    # global args
    # if args.verbose:
    print(*els, **kwargs)

def params_to_dict(params):
    return dict([ param.split("=") for param in params ])

def gen_rf(model, args):
    vprint("generating reachability form",end=" - ")
    rf = ReachabilityForm(
        model, 
        args.initial_label, 
        args.target_label_rf, 
        args.fail_label_rf)
    vprint(rf.system)
    return rf

def load_model(args):
    vprint("loading model", end=" - ")
    mtype = {"mdp":MDP, "dtmc":DTMC}[args.modeltype]
    model = mtype.from_file(args.modelpath + ".lab", args.modelpath + ".tra")
    vprint(model)
    return model

def rfargs(args):
    model = load_model(args)
    output = args.output if args.output is not None else args.modelpath + "-rf"
    vprint("reducing system", end=" - ")
    rf,_,state_action_mapping = ReachabilityForm.reduce(
        model, 
        args.initial_label, 
        args.target_label, 
        args.target_label_rf,
        args.fail_label_rf)
    vprint(rf.system)

    vprint("storing reachability form @ %s" % output,end=" - ")
    mapping = {
     "states" :    [k[0] for k in state_action_mapping.keys()],
     "actions" :   [k[1] for k in state_action_mapping.keys()],
     "rfstates" :  [v[0] for v in state_action_mapping.values()],
     "rfactions" : [v[1] for v in state_action_mapping.values()] }
    with open(output + ".mapping.json","w") as fp:
        json.dump(mapping, fp)
        fp.close()
    # save reachability forms system
    rf.system.save(output)
    vprint("done.")

def minargs(args):
    model = load_model(args)
    assert len(args.method) > 0, "Method not specified"
    assert len(args.solve) > 0 or len(args.solve_iter) > 0, "Neither --solve (-s) nor --solve-iter (-si) specified."

    rf = gen_rf(model, args)    
    
    methodtype = { "QSHeur":QSHeur, "MILPExact":MILPExact }[args.method[0]]
    methodparams = params_to_dict(args.method[1:])
    for k in methodparams:
        if k == "iterations":
            methodparams[k] = int(methodparams[k])
        elif k == "initializertype":
            methodparams[k] = {C.__name__ : C for C in [
                AllOnesInitializer, 
                InverseFrequencyInitializer, 
                InverseReachabilityInitializer
            ]}[methodparams[k]]
        elif k == "updatertype":
            methodparams[k] = {C.__name__ : C for C in [
                InverseResultUpdater
            ]}[methodparams[k]]
    method = methodtype(**methodparams)
    vprint("method is %s" % method)

    solveparams = { **params_to_dict(args.solve), **params_to_dict(args.solve_iter) }
    for k in solveparams:
        if k == "threshold":
            solveparams[k] = float(solveparams[k])
        elif k == "labels":
            solveparams[k] = solveparams[k].split(",")
        elif k == "timeout":
            solveparams[k] = int(solveparams[k])

    vprint("solving with parameters %s" % ", ".join(["%s=%s" % it for it in solveparams.items()]))

    info = { "method" : method.details, "instances" : [] }
    def process_result(idx,result):
        vprint("solved instance %s with %s remaining states" % (idx,sum(result.subsystem.subsystem_mask)), end=" - ")
        check = check_farkas_certificate(rf, methodparams["mode"], ">=", solveparams["threshold"], result.farkas_cert, tol=args.tolerance)
        vprint("certificate %s" % {True:"VALID", False:"INVALID"}[check])
        instance = { "iteration" : idx,
                     "threshold" : solveparams["threshold"],
                     "certificate" : list(result.farkas_cert) } 
        info["instances"].append(instance)

    if len(args.solve_iter) > 0:
        for idx, result in enumerate(method.solveiter(rf, **solveparams)):
            process_result(idx, result)            
    elif len(args.solve) > 0:
        process_result(0, method.solve(rf, **solveparams))
        
    output = args.certificate if args.certificate is not None else args.modelpath + ".certificates.json" 
    vprint("storing results @ %s" % output, end=" - ")
    with open(output,"w") as fp:
        json.dump(info,fp)
    vprint("done.")

def unpack_results(rf,certificatepath):
    assert certificatepath is not None, "Certificate(s) not specified."
    vprint("loading results",end=" - ")
    with open(certificatepath) as fr:
        info = json.load(fr)
    vprint("done.")
    for instance in info["instances"]:
        certificate = np.array(instance["certificate"])
        yield info["method"], instance["iteration"], instance["threshold"], certificate

def certargs(args):
    model = load_model(args)
    rf = gen_rf(model, args)
    for minfo, iteration, threshold, certificate in unpack_results(rf, args.certificate): 
        vprint("checking certificate %s @ threshold=%s" % (iteration, threshold), end=" - ")
        check = check_farkas_certificate(rf, minfo["mode"], ">=", threshold, certificate, tol=args.tolerance)
        vprint({True:"VALID", False:"INVALID"}[check])

def subsysargs(args):
    model = load_model(args)
    assert args.subsys_label not in model.states_by_label.keys(), "Label collision. %s already exists in model." % args.subsys_label
    rf = gen_rf(model, args)
    for minfo, iteration, threshold, certificate in unpack_results(rf, args.certificate): 
        output = args.output if args.output is not None else args.modelpath + "-subsys"
        output = "%s-%s" % (output, iteration)
        vprint("generating subsystem %s" % output,end=" - ")
        ss = Subsystem(rf, certificate, minfo["mode"])
        sys = copy.deepcopy(rf.system)
        for s,inss in enumerate(ss.subsystem_mask):
            if inss:
                sys.labels_by_state.add(s, args.subsys_label)
        sys.save(output)
        vprint("done.")

def infoargs(args):
    load_model(args)

def renderargs(args):
    model = load_model(args)
    output = args.output if args.output is not None else args.modelpath + "-render"
    colorlabels = set() if args.coloring is None else set(args.coloring.split(",")) 
    def state_map(stateidx, statelabels):
        labels = colorlabels.intersection(statelabels)
        return { "color" : color_from_hash(tuple(sorted(labels))),  
                "label" : "State %d\n%s" % (stateidx,",".join(statelabels)),  
                "style" : "filled" }

    graph = model.digraph() if args.coloring is None else model.digraph(state_map=state_map)
    graph.format = "svg"
    vprint("rendering @ %s.svg" % output,end=" - ")
    graph.render(output,view=args.view,cleanup=True)
    vprint("done.")

parser = argparse.ArgumentParser(description='''
SWITSS
===========================
A tool for the computation of Small WITnessing SubSystems in Markov Decision Processes (MDPs) and Discrete Time Markov Chains (DTMCs).
SWITSS implements exact and heuristic methods for computing small witnessing subsystems by reducing the problem to (mixed integer) linear 
programming. Returned subsystems can automatically be rendered graphically and are accompanied with a certificate which proves that the 
subsystem is indeed a witness.

SWITSS works in line with the PRISM Model Checker (https://www.prismmodelchecker.org/) and its formats, such as .tra and .lab files.
In order to use SWITSS, it is necessary to specify a command (see below), a model type (like MDP or DTMC) and a path to a model. 

Work based on
 [FJB19] Funke, F; Jantsch, S; Baier, C: Farkas certificates and minimal witnessing subsystems for probabilistic reachability 
 constraints. (https://arxiv.org/abs/1910.10636)

switss rf {mdp,dtmc} modelpath [-i <STRING>]? [-t <STRING>]? [-trf <STRING>]? [-frf <STRING>]? [-o <STRING>]?

    Transform a DTMC/MDP into a reachability form (RF). A RF is a special DTMC/MDP with N states and C state-action pairs (C=N for 
    DTMCs) that has the following properties:
    
    (1) exactly one fail, target and initial state,
    (2) fail and target have only one action that maps only to themselves,
    (3) if indexing starts at 0, fail (target) is at column N-1 (N-2) and its action at row C-1 (C-2) of the (CxN) transition matrix,
    (4) every state is reachable from the initial state and
    (5) every state reaches the target state.

    The transformation does a forward search starting at the initial state (-i label of initial state, default is "init"), then a 
    backwards search starting from the targets states (-t label of target states, default is "target") and then removes all states 
    that happen to be not reachable in at least one of these searches. Transitions that lead to removed states are mapped to a 
    dedicated new "fail"-state (-frf label of new fail state, default is "rf_fail"). All old target states are remapped to a dedicated 
    new "target"-state (-trf label of new target state, default is "rf_target"). SWITSS then stores a .tra and .lab file for the
    generated model and a .mapping.json-file that contains mappings from system state-actions to the reachability forms state-actions 
    at a given output path (-o path to model in RF, default is ${modelpath}-rf).

switss info {mdp,dtmc} modelpath

    Displays model informations.

switss minimize {mdp,dtmc} modelpath [-i <STRING>]? [-trf <STRING>]? [-frf <STRING>]? -m <METHODPARAMS> {-si,-s} <SOLVEPARAMS> [-c <STRING>]? [-tol <FLOAT>]?

    METHODPARAMS:       {QSHeur,MILPExact} mode={min,max} 
                        [iterations=<INTEGER>]?
                        [initializertype={AllOnesInitializer,InverseFrequencyInitializer,InverseReachabilityInitializer}]?
                        [updatertype={InverseResultUpdater}]?
                        [solver={cbc,gurobi,glpk,cplex}]?
    SOLVEPARAMS:        threshold=<FLOAT> [timeout=<INTEGER>]? [labels=<STRING>[,<STRING>]*]? 

    Takes a model in reachability form (RF) (-i specifies initial state, default is "init"; -trf specifies target state, default is
    "rf_target"; -frf specifies fail state, default is "rf_fail") and searches for minimal witnessing subsystems for a given threshold
    and a given mode, which can either be "min" or "max" (see [FJB19] for references). Supported methods for finding minimal witnesses 
    are QSHeur and MILPExact:

    QSHeur:     ${iterations} specifies number of repeated applications of the heuristic, default is 3.
                ${initializertype} specifies the initial weighting vector for the objective function, default is AllOnesInitializer.
                ${updatertype} specifies the update method, supported is currently only InverseResultUpdater.
                ${solver} specifies the used solver, default is cbc.

    MILPExact:  ${solver} specifies the used solver, default is cbc.

    Searching for subsystems now can be done in an iterative (-si) or singular (-s) fashion. If a method finds multiple subsystems 
    along the way, for example QSHeur with iterations>1, the first option will store all preliminary results, while the last one will
    only store the final result. Options for the solver include:
    
    ${threshold} the minimal required probability of reaching the target state from the initial state (required),
    ${timeout} a timeout in seconds for the solver (as for now, cbc doesn't really work with a given timeout),
    ${labels} is a list of labels. If given, the methods will not minimize the amount of states directly, but rather
        the amount of labels in the system (that are in ${labels}).
    
    Results are then stored in a .json file (-c, default is ${modelpath}.certificates.json) containing method info and farkas certificates
    for each subsystem. Since some solvers operate with too low precision, it is possible to specify a tolerance
    for checking the validity of certificates (-tol, default is 1e-5).

switss certify {mdp,dtmc} modelpath [-i <STRING>]? [-trf <STRING>]? [-frf <STRING>]? -c <STRING> [-tol <FLOAT>]? 

    Takes a model in reachability form (RF) (-i specifies initial state, default is "init"; -trf specifies target state, default is
    "rf_target"; -frf specifies fail state, default is "rf_fail") and a certificates file (-c) and then checks whether each of the given
    certificates yields a valid subsystem. Since some solvers operate with too low precision, it is possible to specify a tolerance
    for checking the validity of certificates (-tol, default is 1e-5).

switss subsystem {mdp,dtmc} modelpath [-i <STRING>]? [-trf <STRING>]? [-frf <STRING>]? -c <STRING> [-sl <STRING>]? [-o <STRING>]?

    Takes a model in reachability form (RF) (-i specifies initial state, default is "init"; -trf specifies target state, default is
    "rf_target"; -frf specifies fail state, default is "rf_fail") and a certificates file (-c) and then generates all corresponding subsystems
    as .tra and .lab-files as specified by the output (-o, default ${modelpath}-subsys). The generated files contain all states that are also 
    in the complete system, but also adds a dedicated label (-sl) to all states that are part of the subsystem.

switss render {mdp,dtmc} modelpath [-o <STRING>]? [-vi]? [-col <STRING>[,<STRING>]*]?

    Takes a model and generates a .svg image from it that is then stored at the given output path (-o, without ".svg"-ending).
    If the -vi option is given, a window will open that contains the rendered result. It is also possible to define a coloring only dependent
    on some specified labels (-col label1,label2,...). If not given, SWITSS will try to give every label-combination a separate coloring.  

''', formatter_class=argparse.RawDescriptionHelpFormatter)

subparsers = parser.add_subparsers(help="swiss action catalogue")

parser_rf = subparsers.add_parser("rf", help="create a reachability form from a model")
parser_info = subparsers.add_parser("info", help="display model information")
parser_minimize = subparsers.add_parser("minimize", help="minimize amount of states")
parser_certify = subparsers.add_parser("certify", help="check whether certificates fulfill farkas conditions")
parser_subsystem = subparsers.add_parser("subsystem", help="generate subsystem(s) from certificate(s)")
parser_render = subparsers.add_parser("render", help="render .svg-image of a system")

parser_certify.set_defaults(func=certargs)
parser_subsystem.set_defaults(func=subsysargs)
parser_render.set_defaults(func=renderargs)
parser_rf.set_defaults(func=rfargs)
parser_minimize.set_defaults(func=minargs)
parser_info.set_defaults(func=infoargs)

for p in [parser_rf, parser_info, parser_minimize, parser_certify, parser_subsystem, parser_render]:
    p.add_argument("modeltype", choices=["mdp","dtmc"], help="type of model")
    p.add_argument("modelpath", help="path to model. requires a modelpath.tra and modelpath.lab file")

for p in [parser_rf, parser_minimize, parser_certify, parser_subsystem ]:
    p.add_argument("-i", "--initial-label", default="init", help="label of initial state")
    p.add_argument("-trf", "--target-label-rf", default="rf_target", help="label of target state in reachability form")
    p.add_argument("-frf", "--fail-label-rf", default="rf_fail", help="label of fail state in reachability form")

parser_rf.add_argument("-t", "--target-label", default="target", help="target states label")
parser_rf.add_argument("-o","--output", help="output file storing mapping from system to reachability form")

parser_minimize.add_argument(
    "-c", "--certificate", 
    help="output .json-file storing certificate(s)")
parser_minimize.add_argument(
    "-m", "--method", 
    default=[], nargs="+", 
    help="specification of solver method")
parser_minimize.add_argument(
    "-s", "--solve", 
    default=[], nargs="+", 
    help="specification of solver parameters. creates a certificate only for the last instance")
parser_minimize.add_argument("-si","--solve-iter", default=[], nargs="+", 
    help="specification of solver parameters. creates certificates for all instances")
parser_minimize.add_argument("-tol", "--tolerance", default=1e-5, type=float, help="allowed certificate deviation")

parser_certify.add_argument(
    "-c","--certificate", 
    help=".json-file containing certificate(s)")
parser_certify.add_argument("-tol", "--tolerance", default=1e-5, type=float, help="allowed certificate deviation")

parser_subsystem.add_argument(
    "-c","--certificate", 
    help=".json-file containing certificate(s)")
parser_subsystem.add_argument(
    "-o", "--output", 
    help="output .json-file for storing subsystems")
parser_subsystem.add_argument(
    "-sl","--subsys-label", 
    default="subsystem", help="new label for states in subsystem")

parser_render.add_argument("-o", "--output", help="output file for storing .svg rendering of model")
parser_render.add_argument("-vi","--view", action="store_true", help="if given, opens up a window containing rendering of system")
parser_render.add_argument("-col","--coloring", help="list of labels that define the colors")
args = parser.parse_args()
try:
    func = args.func(args)
except AttributeError:
    parser.error("too few arguments")
